<aop:aspect id="myAspect" ref="aspectBean">
    <aop:pointcut id="somePointcut" expression="execution(*Component.*(..)" />
    <aop:after-returning pointcut-ref="log" method="" />
</aop:aspect>


连接点 join point

方法调用 method call - 方法被调用时
方法执行 method execution - 方法体的内容被执行的时候
构造函数调用 constructor call - 构造函数被调用时
构造函数执行 constructor execution - 构造函数的内容被执行的时候
静态初始化部分执行 static initializer execution - 类中的静态部分内容初始化时
对象预初始化 object pre-initialization - 主要是指执行构造函数中的 this() 以及super()的时候
对象初始化 object initialization - 在初始化一个类的时候
属性引用 field reference - 引用属性值时
属性设值 field set - 设值属性值时
异常执行 handler execution - 异常执行时
通知执行 advice execution - 当一个aop 通知（增强） 执行时

切入点 pointcuts

pointcut setter();
target(UserInfo) && (call(void set*(String)) || call(void set*(int)))

增强或通知 Advice

前通知 before advice  是指在连接点之前， 先执行增强的代码
后通知 after advice 是指在连接点执行后，在执行增强中的代码。 后增强一部分为连接点正常返回增强以及连接点异常返回增强等类型。
环绕通知 around advice 是一种功能强大的增强， 可以自由地改变程序的流程，连接点返回值等。在环绕增强中除了可以自由添加需要的横切功能以外，
还需要负责主动调用连接点，通过proceed来执行激活连接点的程序。

拦截器 interceptor

拦截器是用来实现对连接点进行拦截，从而在连接点前或者后面加入自定义的切面模块功能。
可以有多个拦截器组成一个拦截器链 interceptor chain， 链上的每个拦截器都会调用下一个拦截器。
Spring aop是采用拦截器实现的。

目标对象 target object

指在基于拦截器机制实现的AOP框架中，位于拦截器链上最末端的对象实例，

AOP代理 proxy
AOP代理是指在基于拦截器机制实现的AOP框架中，实现业务对象的代理对象。


